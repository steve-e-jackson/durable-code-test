################################################################################
# Simplified Linting Makefile
################################################################################
#
# Essential linting targets:
#   make lint-all         - Run all linters (Python + JS + custom)
#   make lint-fix         - Auto-fix formatting issues
#   make lint-custom      - Run custom design linters
#
################################################################################

.PHONY: lint-all lint-fix lint-custom lint-categories

# Run all linters - REQUIRED BY GITHUB ACTIONS
lint-all: dev-start ## Run ALL linters (Python, JS/TS, and custom design rules)
	@echo "$(CYAN)╔════════════════════════════════════════════════════════════╗$(NC)"
	@echo "$(CYAN)║                  Running ALL Linters                      ║$(NC)"
	@echo "$(CYAN)╚════════════════════════════════════════════════════════════╝$(NC)"
	@echo ""
	@echo "$(YELLOW)━━━ Python Linters ━━━$(NC)"
	@docker exec durable-code-backend-$(BRANCH_NAME)-dev bash -c "cd /app && \
		echo '• Black...' && poetry run black --check app tools && \
		echo '• isort...' && poetry run isort --check-only app tools && \
		echo '• Ruff...' && poetry run ruff check app tools && \
		echo '• Flake8...' && flake8_app=\$$(poetry run flake8 app --count 2>/dev/null || echo '0') && flake8_tools=\$$(poetry run flake8 tools --config tools/.flake8 --count 2>/dev/null || echo '0') && echo \"  App violations: \$$flake8_app, Tools violations: \$$flake8_tools\" && \
		echo '• MyPy...' && MYPY_CACHE_DIR=/tmp/mypy_cache poetry run mypy . && \
		echo '• Pylint...' && poetry run pylint app tools 2>&1 | tee /tmp/pylint.out && grep -q 'Your code has been rated at 10.00/10' /tmp/pylint.out && \
		echo '• Bandit...' && poetry run bandit -r app tools && \
		echo '• Xenon...' && poetry run xenon --max-absolute B --max-modules B --max-average A app" || (echo "$(RED)✗ Python linting failed$(NC)" && exit 1)
	@echo "$(GREEN)✓ Python linting passed$(NC)"
	@echo ""
	@echo "$(YELLOW)━━━ TypeScript/React Linters ━━━$(NC)"
	@docker exec durable-code-frontend-$(BRANCH_NAME)-dev sh -c "\
		echo '• TypeScript...' && npm run typecheck && \
		echo '• ESLint...' && npm run lint && \
		echo '• Stylelint...' && npm run lint:css && \
		echo '• Prettier...' && npm run format:check && \
		echo '• HTMLHint...' && htmlhint 'public/**/*.html' 'src/**/*.html' '*.html' --config /.htmlhintrc" || (echo "$(RED)✗ Frontend linting failed$(NC)" && exit 1)
	@echo "$(GREEN)✓ Frontend linting passed$(NC)"
	@echo ""
	@echo "$(YELLOW)━━━ Custom Design Linters ━━━$(NC)"
	@docker exec durable-code-backend-$(BRANCH_NAME)-dev bash -c "cd /app && \
		echo '• File headers...' && PYTHONPATH=/app/tools python -m design_linters --rules style.file-header --format text --recursive --fail-on-error . && \
		echo '• SOLID principles...' && PYTHONPATH=/app/tools python -m design_linters --categories solid --format text --recursive --fail-on-error app && \
		echo '• Style rules...' && PYTHONPATH=/app/tools python -m design_linters --categories style --format text --recursive --fail-on-error app && \
		echo '• Magic literals...' && PYTHONPATH=/app/tools python -m design_linters --categories literals --format text --recursive --fail-on-error app && \
		echo '• Logging practices...' && PYTHONPATH=/app/tools python -m design_linters --categories logging --format text --recursive --fail-on-error app && \
		echo '• Loguru usage...' && PYTHONPATH=/app/tools python -m design_linters --categories loguru --format text --recursive --fail-on-error app && \
		echo '• Security rules...' && PYTHONPATH=/app/tools python -m design_linters --categories security --format text --recursive --fail-on-error app && \
		echo '• Error handling...' && PYTHONPATH=/app/tools python -m design_linters --categories error_handling --format text --recursive --fail-on-error app && \
		echo '• Testing practices...' && PYTHONPATH=/app/tools python -m design_linters --categories testing --format text --recursive --fail-on-error test" || (echo "$(RED)✗ Custom linting failed$(NC)" && exit 1)
	@echo "• File organization (checking root)..." && \
		if ls *.py 2>/dev/null 1>&2; then \
			env PYTHONPATH=tools python -m design_linters.cli --categories organization --format text --fail-on-error *.py || (echo "$(RED)✗ File organization check failed$(NC)" && exit 1); \
		else \
			echo "  No Python files in root to check"; \
		fi
	@echo "$(GREEN)✓ Custom design linting passed$(NC)"
	@echo ""
	@echo "$(YELLOW)━━━ Infrastructure Linters ━━━$(NC)"
	@$(MAKE) -s lint-infra || (echo "$(RED)✗ Infrastructure linting failed$(NC)" && exit 1)
	@echo ""
	@echo "$(GREEN)✅ ALL linting checks passed!$(NC)"

# Auto-fix formatting issues
lint-fix: dev-start ## Auto-fix linting issues (Black, isort, Ruff, ESLint, Prettier, Stylelint)
	@echo "$(CYAN)Auto-fixing code formatting...$(NC)"
	@echo "$(YELLOW)Fixing Python code...$(NC)"
	@docker exec -u root durable-code-backend-$(BRANCH_NAME)-dev bash -c "cd /app && \
		poetry run black app tools && \
		poetry run isort app tools && \
		poetry run ruff check --fix app tools && \
		chown -R 1001:1001 /app/tools"
	@echo "$(YELLOW)Fixing TypeScript/React code...$(NC)"
	@docker exec durable-code-frontend-$(BRANCH_NAME)-dev sh -c "\
		npm run lint:fix && \
		npm run lint:css:fix && \
		npm run format"
	@echo "$(GREEN)✅ Auto-fix complete!$(NC)"

# Run custom design linters only
lint-custom: dev-start ## Run custom design linters with all categories
	@echo "$(CYAN)╔════════════════════════════════════════════════════════════╗$(NC)"
	@echo "$(CYAN)║                Custom Design Linters                      ║$(NC)"
	@echo "$(CYAN)╚════════════════════════════════════════════════════════════╝$(NC)"
	@docker exec durable-code-backend-$(BRANCH_NAME)-dev bash -c "cd /app && PYTHONPATH=/app/tools python -m design_linters --format text --recursive app"
	@echo "$(GREEN)✓ Custom linting complete$(NC)"

# Lint infrastructure files (Terraform and shell scripts)
lint-infra: dev-start ## Lint infrastructure files (Terraform format/validate and shell scripts)
	@echo "$(CYAN)╔════════════════════════════════════════════════════════════╗$(NC)"
	@echo "$(CYAN)║              Infrastructure Linting                       ║$(NC)"
	@echo "$(CYAN)╚════════════════════════════════════════════════════════════╝$(NC)"
	@echo ""
	@echo "$(YELLOW)• Terraform format check...$(NC)"
	@$(MAKE) -s infra-fmt 2>&1 | grep -v "Terraform files formatted" || true
	@echo "$(YELLOW)• Terraform validation...$(NC)"
	@$(MAKE) -s infra-validate 2>&1 | grep -v "Configuration is valid" || true
	@echo ""
	@echo "$(YELLOW)• Shell scripts...$(NC)"
	@docker exec durable-code-backend-$(BRANCH_NAME)-dev bash -c "\
		if command -v shellcheck >/dev/null 2>&1; then \
			for script in infra/scripts/*.sh scripts/*.sh; do \
				if [ -f \"\$$script\" ]; then \
					echo \"  Checking \$$script...\"; \
					shellcheck \"\$$script\" || exit 1; \
				fi; \
			done; \
			echo '$(GREEN)  ✓ Shell scripts passed linting$(NC)'; \
		else \
			echo '$(YELLOW)  ⚠ shellcheck not installed in container - rebuild with make build$(NC)'; \
		fi" || (echo "$(RED)✗ Shell script linting failed$(NC)" && exit 1)
	@echo "$(GREEN)✓ Infrastructure linting passed$(NC)"

# List all custom rule categories
lint-categories: dev-start ## List all custom rule categories with descriptions
	@echo "$(CYAN)╔════════════════════════════════════════════════════════════╗$(NC)"
	@echo "$(CYAN)║                 Custom Rule Categories                    ║$(NC)"
	@echo "$(CYAN)╚════════════════════════════════════════════════════════════╝$(NC)"
	@docker exec durable-code-backend-$(BRANCH_NAME)-dev bash -c "cd /app && PYTHONPATH=/app/tools python -m design_linters --list-categories"