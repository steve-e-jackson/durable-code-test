################################################################################
# Simplified Linting Makefile - Using Dedicated Linting Containers
################################################################################
#
# Essential linting targets:
#   make lint-all         - Run all linters (Python + JS + custom) in parallel
#   make lint-fix         - Auto-fix formatting issues
#   make lint-custom      - Run custom design linters
#
# Container management:
#   make lint-start       - Start dedicated linting containers
#   make lint-stop        - Stop dedicated linting containers
#
################################################################################

.PHONY: lint-all lint-fix lint-custom lint-categories lint-start lint-stop lint-python lint-js lint-design

# Detect which docker compose command to use (for CI compatibility)
DOCKER_COMPOSE := $(shell which docker-compose 2>/dev/null || echo "docker compose")

# Ensure linting containers are running (auto-start if needed)
lint-ensure-containers: ## Ensure linting containers are running
	@if ! docker ps | grep -q "durable-code-python-linter-$(BRANCH_NAME)"; then \
		echo "$(CYAN)Starting Python linting container...$(NC)"; \
		$(DOCKER_COMPOSE) -f .docker/compose/lint.yml up -d python-linter; \
	fi
	@if ! docker ps | grep -q "durable-code-js-linter-$(BRANCH_NAME)"; then \
		echo "$(CYAN)Starting JS linting container...$(NC)"; \
		$(DOCKER_COMPOSE) -f .docker/compose/lint.yml up -d js-linter; \
	fi
	@echo "$(GREEN)✓ Linting containers ready$(NC)"

# Start dedicated linting containers (force start)
lint-start: ## Start dedicated linting containers
	@echo "$(CYAN)Starting dedicated linting containers...$(NC)"
	@$(DOCKER_COMPOSE) -f .docker/compose/lint.yml up -d --build
	@echo "$(GREEN)✓ Linting containers started$(NC)"

# Stop dedicated linting containers
lint-stop: ## Stop dedicated linting containers
	@echo "$(CYAN)Stopping dedicated linting containers...$(NC)"
	@$(DOCKER_COMPOSE) -f .docker/compose/lint.yml down
	@echo "$(GREEN)✓ Linting containers stopped$(NC)"

# Run all linters - REQUIRED BY GITHUB ACTIONS
lint-all: lint-ensure-containers ## Run ALL linters (Python, JS/TS, and custom design rules) in parallel
	@echo "$(CYAN)╔════════════════════════════════════════════════════════════╗$(NC)"
	@echo "$(CYAN)║        Running ALL Linters (Parallel Execution)           ║$(NC)"
	@echo "$(CYAN)╚════════════════════════════════════════════════════════════╝$(NC)"
	@echo ""
	@echo "$(YELLOW)Starting parallel linting execution...$(NC)"
	@$(MAKE) -j3 lint-python lint-js lint-design || (echo "$(RED)✗ Linting failed$(NC)" && exit 1)
	@echo ""
	@echo "$(YELLOW)━━━ Infrastructure Linters ━━━$(NC)"
	@$(MAKE) -s lint-infra || (echo "$(RED)✗ Infrastructure linting failed$(NC)" && exit 1)
	@echo ""
	@echo "$(GREEN)✅ ALL linting checks passed!$(NC)"

# Python linting target (can be run independently or in parallel)
lint-python: lint-ensure-containers ## Run Python linters using dedicated container
	@echo "$(YELLOW)━━━ Python Linters ━━━$(NC)"
	@docker exec -u root durable-code-python-linter-$(BRANCH_NAME) bash -c "cd /workspace/backend && \
		mkdir -p /tmp/.cache/ruff /tmp/.cache/mypy && \
		echo '• Ruff (format + lint)...' && RUFF_CACHE_DIR=/tmp/.cache/ruff ruff format --check app /workspace/tools && RUFF_CACHE_DIR=/tmp/.cache/ruff ruff check app /workspace/tools && \
		echo '• Flake8...' && flake8_app=\$$(flake8 app --count 2>/dev/null || echo '0') && flake8_tools=\$$(flake8 /workspace/tools --config /workspace/tools/.flake8 --count 2>/dev/null || echo '0') && echo \"  App violations: \$$flake8_app, Tools violations: \$$flake8_tools\" && \
		echo '• MyPy...' && MYPY_CACHE_DIR=/tmp/.cache/mypy mypy . && \
		echo '• Pylint...' && pylint app /workspace/tools 2>&1 | tee /tmp/pylint.out && grep -q 'Your code has been rated at 10.00/10' /tmp/pylint.out && \
		echo '• Bandit...' && bandit -r app /workspace/tools && \
		echo '• Xenon...' && xenon --max-absolute B --max-modules B --max-average A app" || (echo "$(RED)✗ Python linting failed$(NC)" && exit 1)
	@echo "$(GREEN)✓ Python linting passed$(NC)"

# JavaScript/TypeScript linting target (can be run independently or in parallel)
lint-js: lint-ensure-containers ## Run JavaScript/TypeScript linters using dedicated container
	@echo "$(YELLOW)━━━ TypeScript/React Linters ━━━$(NC)"
	@docker exec durable-code-js-linter-$(BRANCH_NAME) sh -c "cd /workspace/frontend && \
		echo '• TypeScript...' && npm run typecheck && \
		echo '• ESLint...' && npm run lint && \
		echo '• Stylelint...' && npm run lint:css && \
		echo '• Prettier...' && npm run format:check && \
		echo '• HTMLHint...' && htmlhint 'public/**/*.html' 'src/**/*.html' '*.html' --config /.htmlhintrc" || (echo "$(RED)✗ Frontend linting failed$(NC)" && exit 1)
	@echo "$(GREEN)✓ Frontend linting passed$(NC)"

# Design linting target (can be run independently or in parallel)
lint-design: lint-ensure-containers ## Run custom design linters using dedicated container
	@echo "$(YELLOW)━━━ Custom Design Linters ━━━$(NC)"
	@docker exec durable-code-python-linter-$(BRANCH_NAME) bash -c "cd /workspace && \
		echo '• File headers...' && PYTHONPATH=/workspace/tools python -m design_linters --rules style.file-header --format text --recursive --fail-on-error backend tools test && \
		echo '• SOLID principles...' && PYTHONPATH=/workspace/tools python -m design_linters --categories solid --format text --recursive --fail-on-error backend tools && \
		echo '• Style rules...' && PYTHONPATH=/workspace/tools python -m design_linters --categories style --format text --recursive --fail-on-error backend tools test && \
		echo '• Magic literals...' && PYTHONPATH=/workspace/tools python -m design_linters --categories literals --format text --recursive --fail-on-error backend tools test && \
		echo '• Logging practices...' && PYTHONPATH=/workspace/tools python -m design_linters --categories logging --format text --recursive --fail-on-error backend tools test && \
		echo '• Loguru usage...' && PYTHONPATH=/workspace/tools python -m design_linters --categories loguru --format text --recursive --fail-on-error backend tools test && \
		echo '• Security rules...' && PYTHONPATH=/workspace/tools python -m design_linters --categories security --format text --recursive --fail-on-error backend tools test && \
		echo '• Error handling...' && PYTHONPATH=/workspace/tools python -m design_linters --categories error_handling --format text --recursive --fail-on-error backend tools test && \
		echo '• Testing practices...' && PYTHONPATH=/workspace/tools python -m design_linters --categories testing --format text --recursive --fail-on-error test" || (echo "$(RED)✗ Custom linting failed$(NC)" && exit 1)
	@echo "• File organization (checking root)..." && \
		if docker exec durable-code-python-linter-$(BRANCH_NAME) bash -c "ls /workspace/root/*.py 2>/dev/null 1>&2"; then \
			docker exec durable-code-python-linter-$(BRANCH_NAME) bash -c "cd /workspace/root && PYTHONPATH=/workspace/tools python -m design_linters.cli --categories organization --format text --fail-on-error *.py" || (echo "$(RED)✗ File organization check failed$(NC)" && exit 1); \
		else \
			echo "  No Python files in root to check"; \
		fi
	@echo "$(GREEN)✓ Custom design linting passed$(NC)"

# Auto-fix formatting issues
lint-fix: lint-ensure-containers ## Auto-fix linting issues (Ruff, ESLint, Prettier, Stylelint)
	@echo "$(CYAN)Auto-fixing code formatting...$(NC)"
	@echo "$(YELLOW)Fixing Python code...$(NC)"
	@docker exec -u root durable-code-python-linter-$(BRANCH_NAME) bash -c "cd /workspace/backend && \
		mkdir -p /tmp/.cache/ruff && \
		RUFF_CACHE_DIR=/tmp/.cache/ruff ruff format app /workspace/tools && \
		RUFF_CACHE_DIR=/tmp/.cache/ruff ruff check --fix app /workspace/tools"
	@echo "$(YELLOW)Fixing TypeScript/React code...$(NC)"
	@docker exec durable-code-js-linter-$(BRANCH_NAME) sh -c "cd /workspace/frontend && \
		npm run lint:fix && \
		npm run lint:css:fix && \
		npm run format"
	@echo "$(GREEN)✅ Auto-fix complete!$(NC)"

# Run custom design linters only
lint-custom: lint-ensure-containers ## Run custom design linters with all categories
	@echo "$(CYAN)╔════════════════════════════════════════════════════════════╗$(NC)"
	@echo "$(CYAN)║                Custom Design Linters                      ║$(NC)"
	@echo "$(CYAN)╚════════════════════════════════════════════════════════════╝$(NC)"
	@docker exec durable-code-python-linter-$(BRANCH_NAME) bash -c "cd /workspace && PYTHONPATH=/workspace/tools python -m design_linters --format text --recursive backend tools test"
	@echo "$(GREEN)✓ Custom linting complete$(NC)"

# Lint infrastructure files (Terraform and shell scripts)
lint-infra: lint-ensure-containers ## Lint infrastructure files (Terraform format/validate, TFLint, and shell scripts)
	@echo "$(CYAN)╔════════════════════════════════════════════════════════════╗$(NC)"
	@echo "$(CYAN)║              Infrastructure Linting                       ║$(NC)"
	@echo "$(CYAN)╚════════════════════════════════════════════════════════════╝$(NC)"
	@echo ""
	@echo "$(YELLOW)• Terraform format check...$(NC)"
	@$(MAKE) -s infra-fmt 2>&1 | grep -v "Terraform files formatted" || true
	@echo "$(YELLOW)• Terraform validation...$(NC)"
	@$(MAKE) -s infra-validate 2>&1 | grep -v "Configuration is valid" || true
	@echo ""
	@echo "$(YELLOW)• TFLint (Terraform linter)...$(NC)"
	@docker exec durable-code-python-linter-$(BRANCH_NAME) bash -c "\
		if command -v tflint >/dev/null 2>&1; then \
			if [ -d /workspace/infra ]; then \
				echo '  Running TFLint on /workspace/infra directory...'; \
				cd /workspace/infra && tflint --recursive --no-color 2>&1 | grep -v '^Warning:' || true; \
				echo '$(GREEN)  ✓ TFLint checks passed$(NC)'; \
			else \
				echo '$(YELLOW)  ⚠ /workspace/infra directory not found$(NC)'; \
			fi; \
		else \
			echo '$(YELLOW)  ⚠ tflint not installed in container - rebuild with make init$(NC)'; \
		fi"
	@echo ""
	@echo "$(YELLOW)• Shell scripts...$(NC)"
	@docker exec durable-code-python-linter-$(BRANCH_NAME) bash -c "\
		if command -v shellcheck >/dev/null 2>&1; then \
			for script in /workspace/infra/scripts/*.sh /workspace/scripts/*.sh; do \
				if [ -f \"\$$script\" ]; then \
					echo \"  Checking \$$script...\"; \
					shellcheck --severity=warning \"\$$script\" || exit 1; \
				fi; \
			done; \
			echo '$(GREEN)  ✓ Shell scripts passed linting$(NC)'; \
		else \
			echo '$(YELLOW)  ⚠ shellcheck not installed in container - rebuild with make build$(NC)'; \
		fi" || (echo "$(RED)✗ Shell script linting failed$(NC)" && exit 1)
	@echo "$(GREEN)✓ Infrastructure linting passed$(NC)"

# List all custom rule categories
lint-categories: lint-ensure-containers ## List all custom rule categories with descriptions
	@echo "$(CYAN)╔════════════════════════════════════════════════════════════╗$(NC)"
	@echo "$(CYAN)║                 Custom Rule Categories                    ║$(NC)"
	@echo "$(CYAN)╚════════════════════════════════════════════════════════════╝$(NC)"
	@docker exec durable-code-python-linter-$(BRANCH_NAME) bash -c "cd /workspace && PYTHONPATH=/workspace/tools python -m design_linters --list-categories"
