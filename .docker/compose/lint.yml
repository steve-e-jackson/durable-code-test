# Purpose: Docker Compose configuration for dedicated linting containers
# Scope: Orchestrates Python and JavaScript linting services using multi-stage builds
# Overview: Defines linting services using the 'lint' target from multi-stage Dockerfiles.
#     Services mount source code directories for analysis without application runtime.
#     Configured for manual execution via make targets, with networking isolation and
#     resource constraints. Leverages shared base layers for efficient caching.
# Dependencies: Multi-stage Dockerfiles with lint target, source code directories
# Exports: Named linting services (python-linter, js-linter)
# Interfaces: Volume mounts to source directories, network isolation
# Implementation: Multi-stage builds with lint target, shared base layer caching

version: '3.8'

services:
  python-linter:
    build:
      context: ../..
      dockerfile: .docker/dockerfiles/Dockerfile.backend
      target: lint
    container_name: durable-code-python-linter-${BRANCH_NAME:-main}
    volumes:
      # Backend application code
      - ../../durable-code-app/backend:/workspace/backend
      # Design linters framework
      - ../../tools:/workspace/tools
      # Test files
      - ../../test:/workspace/test
      # Infrastructure files for TFLint
      - ../../infra:/workspace/infra
      # Project root for file organization checks
      - ../..:/workspace/root
    networks:
      - linting-network
    # Resource limits to prevent runaway processes
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
    # Override to keep container running for make targets
    command: ["tail", "-f", "/dev/null"]

  js-linter:
    build:
      context: ../..
      dockerfile: .docker/dockerfiles/Dockerfile.frontend
      target: lint
    container_name: durable-code-js-linter-${BRANCH_NAME:-main}
    volumes:
      # Frontend application code
      - ../../durable-code-app/frontend:/workspace/frontend
      # Project root for global configs
      - ../..:/workspace/root
    networks:
      - linting-network
    # Resource limits for frontend linting
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    # Override to keep container running for make targets and symlink node_modules
    command: ["sh", "-c", "ln -sf /workspace/node_modules /workspace/frontend/node_modules && tail -f /dev/null"]

networks:
  linting-network:
    driver: bridge
    # Isolated network for linting containers
    internal: true