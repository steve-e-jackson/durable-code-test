# Purpose: Central navigation index for AI agents and development workflows across the project
# Scope: All AI agent interactions, code templates, documentation, and project navigation
# Overview: Provides the primary entry point for AI agents to understand and navigate the project
#     structure. Contains quick navigation links, common workflows, template references, and feature
#     documentation links. Designed for efficient AI agent usage with structured YAML for both
#     human readability and programmatic access. Serves as the authoritative source for project
#     capabilities, available commands, and development workflows.
# Dependencies: layout.yaml for file placement rules, index_expanded.md for detailed documentation
# Exports: Project structure navigation, template locations, feature descriptions, command workflows
# Environment: Development and production environments, used by AI agents and developers
# Related: .ai/layout.yaml, .ai/index_expanded.md, .ai/docs/, .ai/templates/, .ai/features/
# Implementation: YAML structure with hierarchical organization for quick agent navigation

_meta:
  name: "Durable Code Test - AI Agent Index"
  version: "1.0"
  purpose: "AI-ready development practices demonstration project"
  layout_definition:
    file: ".ai/layout.yaml"
    description: "Authoritative source for project structure and file placement rules"
    enforcement: "MUST be consulted before any file creation or movement"
  expanded_documentation:
    file: ".ai/index_expanded.md"
    description: "Comprehensive details, usage examples, file locations, and implementation guides"
    when_to_read: "When you need detailed understanding of any feature, template usage, or implementation guidance"
  ai_agent_usage:
    step_1: "Read this YAML file first for quick navigation and overview"
    step_2: "Consult layout.yaml for file placement rules BEFORE creating any files"
    step_3: "Reference index_expanded.md for detailed information on specific topics"
    step_4: "Use templates from .ai/templates/ for code generation"
    step_5: "Follow standards from .ai/docs/ for compliance"

quick_actions:
  check_file_placement:
    command: "Consult .ai/layout.yaml"
    purpose: "Verify correct location for any file type"
    note: "MUST be checked before creating or moving files"
  generate_code:
    guide: ".ai/howto/create-new-code-files.md"
    process: "1. Check layout.yaml 2. Select template 3. Read template details in index_expanded.md 4. Follow code creation guide"
  ask_questions:
    command: "/ask [your question]"
    note: "Automatically references index, layout, and expanded documentation"
  start_development:
    command: "make dev"
    details_in: "index_expanded.md#development-tooling"
  run_tests:
    command: "make test"
    details_in: "index_expanded.md#testing-framework"
  check_page_content:
    command: "docker exec durable-code-frontend-dev node /app/scripts/check-page-content.js"
    details_in: "index_expanded.md#page-content-verification"

templates:
  _expanded_section: "index_expanded.md#templates"
  _usage_note: "All templates use {{PLACEHOLDER}} variables - see expanded docs for complete variable lists"

  linting-rule.py.template:
    purpose: "Extend design linting framework with new rules"
    location: "tools/design_linters/rules/"
    example_files: ["tools/design_linters/rules/solid/srp_rules.py"]

  react-component.tsx.template:
    purpose: "Modern React components with TypeScript and hooks"
    location: "durable-code-app/frontend/src/components/"
    example_files: ["durable-code-app/frontend/src/components/ParticleBackground.tsx"]

  web-tab.tsx.template:
    purpose: "Add new tabs to the web application interface"
    location: "durable-code-app/frontend/src/components/tabs/ or features/[feature-name]/"
    example_files:
      - "durable-code-app/frontend/src/features/planning/components/PlanningTab/PlanningTab.tsx"
      - "durable-code-app/frontend/src/features/repository/"

  fastapi-endpoint.py.template:
    purpose: "Production-ready API endpoints with validation"
    location: "durable-code-app/backend/app/"
    example_files: ["durable-code-app/backend/app/main.py"]

  test-suite.py.template:
    purpose: "Comprehensive test coverage for any component"
    location: "test/unit_test/tools/design_linters/"
    example_files: ["test/unit_test/tools/design_linters/test_basic.py"]

  workflow.html.template:
    purpose: "Interactive workflow documentation with Mermaid diagrams"
    location: "anywhere for documentation"
    use_case: "Process documentation, sequence diagrams, training materials"

  react-feature.tsx.template:
    purpose: "Feature-based React components with full architecture"
    location: "durable-code-app/frontend/src/features/[feature-name]/components/"
    example_files: ["durable-code-app/frontend/src/features/repository/"]

  react-feature-hook.ts.template:
    purpose: "Custom React hooks for feature data management"
    location: "durable-code-app/frontend/src/features/[feature-name]/hooks/"
    example_files: ["durable-code-app/frontend/src/features/repository/hooks/useRepository.ts"]

  react-feature-types.ts.template:
    purpose: "TypeScript interfaces for feature domain modeling"
    location: "durable-code-app/frontend/src/features/[feature-name]/types/"
    example_files: ["durable-code-app/frontend/src/features/repository/types/repository.types.ts"]

  react-websocket-service.ts.template:
    purpose: "WebSocket service class for React with reconnection and event handling"
    location: "durable-code-app/frontend/src/features/[feature-name]/services/"
    example_files: ["durable-code-app/frontend/src/features/demo/services/websocketService.ts"]

  react-websocket-singleton.ts.template:
    purpose: "Singleton wrapper for WebSocket service to handle React StrictMode"
    location: "durable-code-app/frontend/src/features/[feature-name]/services/"
    example_files: ["durable-code-app/frontend/src/features/demo/services/websocketSingleton.ts"]

  react-websocket-hook.ts.template:
    purpose: "React hook for WebSocket connection management with state synchronization"
    location: "durable-code-app/frontend/src/features/[feature-name]/hooks/"
    example_files: ["durable-code-app/frontend/src/features/demo/hooks/useWebSocket.ts"]

  websocket-endpoint.py.template:
    purpose: "FastAPI WebSocket endpoint with streaming and command handling"
    location: "durable-code-app/backend/app/"
    example_files: ["durable-code-app/backend/app/oscilloscope.py"]

  react-error-boundary.tsx.template:
    purpose: "Error boundary components for React error isolation and recovery"
    location: "durable-code-app/frontend/src/core/errors/"
    example_files:
      - "durable-code-app/frontend/src/core/errors/MinimalErrorBoundary.tsx"
      - "durable-code-app/frontend/src/core/errors/ErrorBoundary.tsx"

  react-performance-hook.ts.template:
    purpose: "High-performance React hooks for real-time data handling with event-driven patterns"
    location: "durable-code-app/frontend/src/features/[feature-name]/hooks/"
    example_files:
      - "durable-code-app/frontend/src/features/demo/hooks/useOscilloscope.ts"
      - "durable-code-app/frontend/src/features/demo/hooks/useWebSocket.ts"

  circular-buffer.ts.template:
    purpose: "High-performance circular buffer using Float32Array for real-time data handling"
    location: "durable-code-app/frontend/src/features/[feature-name]/utils/"
    example_files: ["durable-code-app/frontend/src/features/demo/utils/CircularBuffer.ts"]

  performance-monitor.ts.template:
    purpose: "Application-wide performance monitoring singleton with threshold alerts"
    location: "durable-code-app/frontend/src/core/performance/"
    example_files: ["durable-code-app/frontend/src/core/performance/PerformanceMonitor.ts"]

  backend-exception-hierarchy.py.template:
    purpose: "Structured exception hierarchy for backend error handling with status codes"
    location: "durable-code-app/backend/app/core/"
    example_files: ["durable-code-app/backend/app/core/exceptions.py"]

  backend-retry-logic.py.template:
    purpose: "Retry decorators with exponential backoff for resilient backend operations"
    location: "durable-code-app/backend/app/core/"
    example_files: ["durable-code-app/backend/app/core/retry.py"]

features:
  _expanded_section: "index_expanded.md#features"
  _implementation_note: "Each feature has detailed documentation with file references and usage examples"

  design-linters:
    file: "features/design-linters.md"
    summary: "Pluggable linting framework enforcing SOLID principles and code quality"
    key_files:
      - "tools/design_linters/cli.py"
      - "tools/design_linters/framework/"
    usage: "make lint-custom, design-linter src/"

  web-application:
    file: "features/web-application.md"
    summary: "Full-stack React/TypeScript + FastAPI application with tabbed interface"
    key_files:
      - "durable-code-app/frontend/src/App.tsx"
      - "durable-code-app/backend/app/main.py"
    usage: "make dev, make launch"

  development-tooling:
    file: "features/development-tooling.md"
    summary: "Comprehensive build automation with Make targets and Docker"
    key_files:
      - "Makefile"
      - "Makefile.lint"
      - "docker-compose.yml"
    usage: "make help, make build, make test"

  infrastructure-management:
    file: "features/infrastructure-management.md"
    summary: "Docker-based Terraform infrastructure management for AWS deployment"
    key_files:
      - "Makefile.infra"
      - "infra/terraform/"
      - "infra/scripts/"
    usage: "make infra-plan, make infra-apply, make infra-destroy"

  claude-integration:
    file: "features/claude-integration.md"
    summary: "AI-powered development workflows with custom commands"
    key_files:
      - ".claude/commands/"
      - ".ai/templates/"
    usage: "/ask, /solid, /fix, /done commands"

  testing-framework:
    file: "features/testing-framework.md"
    summary: "Multi-layered quality assurance with unit, integration, and performance tests"
    key_files:
      - "test/"
      - ".pre-commit-config.yaml"
    usage: "make test, pytest"

  error-boundaries:
    file: "features/error-boundaries.md"
    summary: "Comprehensive React error boundary system with 3-tier architecture and recovery mechanisms"
    key_files:
      - "durable-code-app/frontend/src/core/errors/"
      - "scripts/"
      - "scripts/check-page-content.js"
    usage: "node scripts/check-page-content.js, node scripts/test-rendered-content.js"

  terraform-conditional-deployment:
    file: "features/terraform-conditional-deployment.md"
    summary: "Intelligent resource deployment based on environment needs and cost optimization"
    key_files:
      - "infra/terraform/locals.tf"
      - "infra/terraform/conditional_resources.tf"
      - "Makefile.infra"
    usage: "make infra-plan SCOPE=base, make infra-plan SCOPE=compute"

standards:
  _expanded_section: "index_expanded.md#standards"
  _compliance_note: "All generated code must follow these standards - automatically enforced by linting"

  STANDARDS.md:
    purpose: "Core development guidelines and best practices"
    enforcement: "Pre-commit hooks, linting rules, CI/CD"

  FILE_HEADER_STANDARDS.md:
    purpose: "Required documentation headers for all files"
    template: "Purpose, Scope, Overview, Dependencies, Exports, Interfaces, Implementation"

  CSS_LAYOUT_STABILITY.md:
    purpose: "Frontend consistency and responsive design guidelines"
    applies_to: "React components, CSS modules, styling patterns"

  BRANCH_PROTECTION.md:
    purpose: "Git workflow and collaborative development standards"
    enforcement: "GitHub branch protection rules"

  PERFORMANCE_OPTIMIZATION_STANDARDS.md:
    purpose: "Performance optimization patterns for React applications with real-time data handling"
    enforcement: "Code reviews, performance monitoring, linting rules"

  DOCKER_EXECUTION_STANDARDS.md:
    purpose: "Docker-only execution requirements for all development tools and scripts"
    enforcement: "Documentation standards, Make targets, no local execution patterns"

  ERROR_HANDLING_STANDARDS.md:
    purpose: "Error handling patterns and antipatterns to avoid, especially broad exception catching"
    enforcement: "W0718 linting check must never be disabled, custom error_handling linting rules"

  INFRASTRUCTURE_PRINCIPLES.md:
    purpose: "Infrastructure design philosophy and AWS architecture patterns"
    enforcement: "Terraform deployment patterns, infrastructure reviews"

  STYLING_SYSTEM_GUIDE.md:
    purpose: "CSS Modules + CSS Variables system for consistent styling"
    enforcement: "Code reviews, frontend linting, design system compliance"

  TERRAFORM_STANDARDS.md:
    purpose: "Infrastructure as Code standards for Terraform deployments"
    enforcement: "Terraform validation, deployment scripts, CI/CD"

  DUAL_ARCHITECTURE_README.md:
    purpose: "Infrastructure architecture patterns separating persistent and ephemeral resources"
    enforcement: "Terraform deployment patterns, cost optimization"

  REPOSITORY_FOR_AI.md:
    purpose: "AI development patterns and repository organization principles"
    enforcement: "Project structure, AI agent workflows"

howto:
  _expanded_section: "index_expanded.md#howto-guides"
  _usage_note: "Step-by-step guides for common development tasks"

  run-tests.md:
    purpose: "Execute tests using Make targets and Docker"
    key_commands: ["make test", "make test-unit", "make test-coverage"]

  run-linting.md:
    purpose: "Run linting and code quality checks"
    key_commands: ["make lint-all", "make lint-custom", "make lint-fix"]

  setup-development.md:
    purpose: "Complete development environment setup"
    key_commands: ["make init", "make dev", "make status"]

  setup-direnv.md:
    purpose: "Configure direnv for automatic environment variable loading"
    key_commands: ["direnv allow", "direnv reload", "direnv status"]

  deploy-application.md:
    purpose: "Production deployment and monitoring"
    key_commands: ["make build", "make start", "make status"]

  manage-infrastructure.md:
    purpose: "Manage AWS infrastructure using Terraform Make targets"
    key_commands: ["make infra-plan", "make infra-apply", "make infra-destroy", "make infra-check-aws"]

  debug-issues.md:
    purpose: "Systematic debugging and troubleshooting"
    key_commands: ["make logs", "docker logs", "make status"]

  debug-with-tests-and-logging.md:
    purpose: "Test-driven debugging methodology"
    philosophy: "Use unit tests and Loguru logging, never temp files"

  implement-websocket-react.md:
    purpose: "Implement WebSocket connections in React with StrictMode compatibility"
    key_commands: ["Use singleton pattern", "Handle reconnection", "Sync state with service"]

  implement-error-boundaries.md:
    purpose: "Implement React error boundaries with 3-tier architecture and testing"
    key_commands:
      - "docker exec durable-code-frontend-dev node /app/scripts/check-page-content.js"
      - "docker exec durable-code-frontend-dev node /app/scripts/test-rendered-content.js"
      - "use MinimalErrorBoundary for stability"

  implement-backend-error-handling.md:
    purpose: "Implement robust backend error handling with exceptions, retry logic, and circuit breakers"
    key_commands:
      - "No broad exceptions"
      - "Use retry decorators"
      - "Add global handlers"
      - "Enable W0718 linting"

  test-page-content.md:
    purpose: "Verify React app renders correctly using various testing tools"
    key_commands: ["node scripts/check-page-content.js", "node scripts/test-rendered-content.js", "node scripts/simple-check.js --watch"]

  create-new-code-files.md:
    purpose: "Step-by-step guide for creating production-ready code files"
    key_commands: ["Follow 9-step process", "Check layout.yaml first", "Use templates"]

common_workflows:
  add_linting_rule:
    steps:
      - "Use linting-rule.py.template"
      - "Place in tools/design_linters/rules/"
      - "Add tests"
      - "Update configuration"
    details_in: "index_expanded.md#adding-linting-rules"

  add_web_tab:
    steps:
      - "Use web-tab.tsx.template"
      - "Choose: components/tabs/ for simple tabs or features/[name]/ for complex features"
      - "Update App.tsx with lazy loading"
      - "Add styling and types"
    details_in: "index_expanded.md#adding-web-tabs"

  add_api_endpoint:
    steps:
      - "Use fastapi-endpoint.py.template"
      - "Add to backend routes"
      - "Create Pydantic models"
      - "Add tests"
    details_in: "index_expanded.md#adding-api-endpoints"

  add_feature_tab:
    steps:
      - "Create feature directory"
      - "Use react-feature templates"
      - "Implement types, hooks, and components"
      - "Add lazy loading to App.tsx"
      - "Update tests for async loading"
    details_in: "index_expanded.md#adding-feature-tabs"

  add_websocket_feature:
    steps:
      - "Use websocket-endpoint.py.template for backend"
      - "Use react-websocket-service.ts.template for service"
      - "Use react-websocket-singleton.ts.template for singleton"
      - "Use react-websocket-hook.ts.template for React hook"
      - "Follow implement-websocket-react.md guide"
    details_in: ".ai/howto/implement-websocket-react.md"

  fix_text_accessibility:
    steps:
      - "Create common title classes (.hero-title, .light-title-on-dark)"
      - "Add to src/styles/theme/typography.css"
      - "Replace individual text styles with common classes"
      - "Ensure proper color contrast"
    details_in: ".ai/docs/STYLING_SYSTEM_GUIDE.md"

  implement_error_boundaries:
    steps:
      - "Use MinimalErrorBoundary for stability"
      - "Implement 3-tier architecture (root, route, component)"
      - "Add to main.tsx, AppShell.tsx, and component level"
      - "Test with scripts/check-page-content.js"
      - "Verify with page content tools"
    details_in: ".ai/howto/implement-error-boundaries.md"

  implement_backend_error_handling:
    steps:
      - "Use backend-exception-hierarchy.py.template for exceptions"
      - "Add global handlers to main.py"
      - "Replace broad exceptions with specific types"
      - "Use backend-retry-logic.py.template for retry decorators"
      - "Enable W0718 in pylint"
      - "Test error responses"
    details_in: ".ai/howto/implement-backend-error-handling.md"

  test_page_functionality:
    steps:
      - "Use scripts/check-page-content.js for basic verification"
      - "Use scripts/test-rendered-content.js for complete testing"
      - "Use scripts/simple-check.js --watch for continuous monitoring"
      - "Debug with docker exec durable-code-frontend-dev node /app/scripts/test-rendered-content.js"
    details_in: ".ai/howto/test-page-content.md"

  optimize_performance:
    steps:
      - "Identify performance bottlenecks"
      - "Eliminate polling loops with event-driven patterns"
      - "Use CircularBuffer for high-frequency data"
      - "Implement PerformanceMonitor for tracking"
      - "Use Float32Array instead of number[]"
      - "Data-driven rendering instead of continuous animation"
    details_in: ".ai/docs/PERFORMANCE_OPTIMIZATION_STANDARDS.md"

  create_performance_hook:
    steps:
      - "Use react-performance-hook.ts.template"
      - "Implement event-driven state updates"
      - "Use CircularBuffer for data storage"
      - "Add performance monitoring integration"
      - "Test for eliminated polling patterns"
    details_in: ".ai/templates/react-performance-hook.ts.template"

  implement_docker_script:
    steps:
      - "Place script in scripts/ directory"
      - "Create corresponding Make target with docker exec"
      - "Update documentation to show Docker execution only"
      - "Test script execution in container"
      - "Remove any local execution references"
    details_in: ".ai/docs/DOCKER_EXECUTION_STANDARDS.md"

  deploy_infrastructure:
    steps:
      - "Check AWS credentials with make infra-check-aws"
      - "Initialize Terraform with make infra-init (auto-runs)"
      - "Plan changes with make infra-plan"
      - "Apply infrastructure with make infra-apply"
      - "Monitor costs and destroy when not needed"
    details_in: ".ai/howto/manage-infrastructure.md"
