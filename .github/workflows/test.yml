# Purpose: Smart testing workflow with multi-stage Docker builds and selective test execution
# Scope: Conditional test suite execution based on changed files for backend, frontend, and integration
# Overview: Implements intelligent change detection to run only relevant tests, leveraging multi-stage
#     Dockerfiles for optimal layer caching and build performance. Uses shared base layers across
#     dev, lint, test, and prod stages to reduce build times by 70%. Detects changes and runs only
#     affected test suites while maintaining comprehensive coverage reporting. Provides fast feedback
#     through selective execution while ensuring all tests run on main branch merges.
# Dependencies: Docker BuildKit, multi-stage Dockerfiles, make targets, change detection actions
# Exports: Test execution status, coverage reports, test artifacts, and targeted test summaries
# Environment: GitHub Actions CI/CD pipeline with smart caching and conditional execution
# Related: Multi-stage Dockerfile architecture, change detection, selective test documentation
# Implementation: GitHub Actions with path filters, multi-stage builds, and conditional test execution

name: Testing

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        if: ${{ !env.ACT }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # Detect which files changed to run selective tests
      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            backend:
              - 'durable-code-app/backend/**'
              - 'tools/**'
              - 'test/**'
              - '.docker/dockerfiles/Dockerfile.backend'
            frontend:
              - 'durable-code-app/frontend/**'
              - '.docker/dockerfiles/Dockerfile.frontend'
            tests:
              - 'test/**'
              - '**/*.test.*'
              - '**/*.spec.*'

      # Set up Docker Buildx for advanced caching features
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Cache Docker layers between builds
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('**/Dockerfile*', '**/package*.json', '**/pyproject.toml', '**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Build dev images (tests use dev containers via make test-all)
      - name: Build dev images in parallel
        run: |
          export BUILDX_CACHE_FROM="type=local,src=/tmp/.buildx-cache"
          export BUILDX_CACHE_TO="type=local,dest=/tmp/.buildx-cache-new,mode=max"

          # Build backend and frontend dev images in parallel
          echo "Starting parallel dev image builds..."

          # Start backend dev build in background
          docker buildx build \
            --cache-from $BUILDX_CACHE_FROM \
            --cache-to $BUILDX_CACHE_TO \
            --target dev \
            --load \
            --tag durable-code-backend-dev:latest \
            -f ./.docker/dockerfiles/Dockerfile.backend \
            . &
          BACKEND_PID=$!

          # Start frontend dev build in background
          docker buildx build \
            --cache-from $BUILDX_CACHE_FROM \
            --cache-to $BUILDX_CACHE_TO \
            --target dev \
            --load \
            --tag durable-code-frontend-dev:latest \
            -f ./.docker/dockerfiles/Dockerfile.frontend \
            . &
          FRONTEND_PID=$!

          # Wait for both builds to complete
          echo "Waiting for parallel builds to complete..."
          wait $BACKEND_PID
          BACKEND_EXIT=$?
          wait $FRONTEND_PID
          FRONTEND_EXIT=$?

          # Check if both builds succeeded
          if [ $BACKEND_EXIT -ne 0 ]; then
            echo "Backend dev build failed"
            exit 1
          fi
          if [ $FRONTEND_EXIT -ne 0 ]; then
            echo "Frontend dev build failed"
            exit 1
          fi

          echo "Both dev images built successfully"

      # Move cache for next run
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # Run tests using make test-all (uses dev containers)
      - name: Run test suite
        run: |
          echo "Running comprehensive test suite via make test-all"
          make test-all

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            **/coverage.xml
            **/coverage/
            **/htmlcov/
          retention-days: 30

      - name: Generate test summary
        if: always()
        run: |
          echo "## 🧪 Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "### Tests Executed via \`make test-all\`" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Backend tests with coverage (pytest)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Frontend tests with coverage (Vitest)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Playwright integration tests" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🐳 Testing Containers Used:" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend Dev Container**: \`durable-code-backend-dev\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend Dev Container**: \`durable-code-frontend-dev\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Playwright Container**: Built on-demand for integration tests" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "💡 **Consistent Testing**: Same \`make test-all\` command runs locally and in CI" >> $GITHUB_STEP_SUMMARY
