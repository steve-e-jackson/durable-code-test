# Purpose: Comprehensive testing workflow with Docker-based test execution and intelligent caching
# Scope: Full test suite execution for backend, frontend, integration, and design linter framework tests
# Overview: Executes complete test coverage across all application components using Docker containerization
#     for consistent test environments. Implements advanced Docker BuildKit caching to optimize build
#     performance, manages test artifact collection and coverage reporting, and provides comprehensive
#     test result summarization. Ensures test reliability through cached Docker images while maintaining
#     fast execution times and proper artifact management for debugging and coverage analysis.
# Dependencies: Docker BuildKit, make targets, test frameworks (pytest, Jest/Vitest), coverage tools
# Exports: Test execution status, coverage reports, test artifacts, and comprehensive test summaries
# Environment: GitHub Actions CI/CD pipeline with Docker layer caching and artifact storage
# Related: Links to testing documentation, Docker configuration, and coverage reporting setup
# Implementation: Uses GitHub Actions with Docker BuildKit caching and make-based test orchestration

name: Testing

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        if: ${{ !env.ACT }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # Set up Docker Buildx for advanced caching features
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Cache Docker layers between builds
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('**/Dockerfile*', '**/package*.json', '**/pyproject.toml', '**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Build images with cache
      - name: Build Docker images with cache
        run: |
          export BUILDX_CACHE_FROM="type=local,src=/tmp/.buildx-cache"
          export BUILDX_CACHE_TO="type=local,dest=/tmp/.buildx-cache-new,mode=max"

          docker buildx build \
            --cache-from $BUILDX_CACHE_FROM \
            --cache-to $BUILDX_CACHE_TO \
            --load \
            -t durable-code-backend-dev:latest \
            -f ./durable-code-app/backend/Dockerfile.dev \
            ./durable-code-app/backend

          docker buildx build \
            --cache-from $BUILDX_CACHE_FROM \
            --cache-to $BUILDX_CACHE_TO \
            --load \
            -t durable-code-frontend-dev:latest \
            -f ./durable-code-app/frontend/Dockerfile.dev \
            ./durable-code-app/frontend

      # Move cache for next run
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # Run tests using existing make target
      - name: Run comprehensive test suite
        run: make test-all

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            **/coverage.xml
            **/coverage/
            **/htmlcov/
          retention-days: 30

      - name: Generate test summary
        if: always()
        run: |
          echo "## ðŸ§ª Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "All tests completed using \`make test-all\`" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Backend tests with coverage (pytest)" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Frontend tests with coverage (Jest/Vitest)" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Integration tests" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Design linter framework tests" >> $GITHUB_STEP_SUMMARY
