name: Terraform Workspace Tests

on:
  pull_request:
    paths:
      - 'infra/terraform/**'
      - 'infra/scripts/**'
      - 'Makefile.infra'
      - '.github/workflows/terraform-test.yml'
  push:
    branches:
      - main
    paths:
      - 'infra/terraform/**'
      - 'infra/scripts/**'
      - 'Makefile.infra'
  workflow_dispatch:

jobs:
  validate-terraform:
    name: Validate Terraform Workspaces
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    strategy:
      matrix:
        workspace: [base, runtime]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.0

      - name: Terraform Format Check
        id: fmt
        run: |
          echo "üé® Checking Terraform formatting..."
          cd infra/terraform/workspaces/${{ matrix.workspace }}
          terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Init (without backend)
        id: init
        run: |
          echo "üîß Initializing Terraform workspace: ${{ matrix.workspace }}"
          cd infra/terraform/workspaces/${{ matrix.workspace }}
          terraform init -backend=false

      - name: Terraform Validate
        id: validate
        run: |
          echo "‚úÖ Validating Terraform configuration..."
          cd infra/terraform/workspaces/${{ matrix.workspace }}
          terraform validate

      - name: Terraform Security Scan (tfsec)
        id: tfsec
        run: |
          echo "üîí Running security scan..."
          # Install tfsec if available
          if command -v tfsec >/dev/null 2>&1; then
            cd infra/terraform/workspaces/${{ matrix.workspace }}
            tfsec .
          else
            echo "‚ö†Ô∏è tfsec not available, skipping security scan"
          fi
        continue-on-error: true

      - name: Comment PR (if PR)
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const workspace = '${{ matrix.workspace }}';
            const fmtResult = '${{ steps.fmt.outcome }}';
            const initResult = '${{ steps.init.outcome }}';
            const validateResult = '${{ steps.validate.outcome }}';
            const tfsecResult = '${{ steps.tfsec.outcome }}';

            const statusIcon = (result) => result === 'success' ? '‚úÖ' : result === 'failure' ? '‚ùå' : '‚ö†Ô∏è';

            const output = `
            ## Terraform Validation Results - ${workspace.toUpperCase()} Workspace

            | Check | Status |
            |-------|--------|
            | Format | ${statusIcon(fmtResult)} \`terraform fmt\` |
            | Init | ${statusIcon(initResult)} \`terraform init\` |
            | Validate | ${statusIcon(validateResult)} \`terraform validate\` |
            | Security | ${statusIcon(tfsecResult)} \`tfsec\` |

            ### Workspace: \`infra/terraform/workspaces/${workspace}\`

            ${fmtResult === 'failure' ? '‚ùå **Format Check Failed**: Run `terraform fmt` to fix formatting issues.' : ''}
            ${initResult === 'failure' ? '‚ùå **Init Failed**: Check Terraform configuration syntax.' : ''}
            ${validateResult === 'failure' ? '‚ùå **Validation Failed**: Fix Terraform configuration errors.' : ''}
            ${validateResult === 'success' && initResult === 'success' && fmtResult === 'success' ? '‚úÖ All checks passed for ' + workspace + ' workspace!' : ''}
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  validate-scripts:
    name: Validate Shell Scripts
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install ShellCheck
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck

      - name: Validate workspace scripts
        run: |
          echo "üêö Validating shell scripts..."
          find infra/scripts -name "*.sh" -type f | while read -r script; do
            echo "Checking: $script"
            shellcheck "$script"
          done

      - name: Test script syntax
        run: |
          echo "üìù Testing script syntax..."
          find infra/scripts -name "*.sh" -type f | while read -r script; do
            echo "Syntax check: $script"
            bash -n "$script"
          done

      - name: Test workspace script parameters
        run: |
          echo "‚öôÔ∏è Testing script parameter validation..."

          # Test workspace scripts with invalid parameters
          scripts=(
            "infra/scripts/workspace-deploy.sh"
            "infra/scripts/workspace-destroy.sh"
            "infra/scripts/workspace-deploy-base.sh"
            "infra/scripts/workspace-deploy-runtime.sh"
            "infra/scripts/workspace-destroy-base.sh"
            "infra/scripts/workspace-destroy-runtime.sh"
          )

          for script in "${scripts[@]}"; do
            if [[ -f "$script" ]]; then
              echo "Testing parameter validation: $script"
              # These should fail gracefully with usage messages
              "$script" 2>/dev/null && echo "‚ùå Script should fail without parameters" || echo "‚úÖ Script correctly validates parameters"
            fi
          done

  test-makefile-targets:
    name: Test Makefile Targets
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test Makefile target syntax
        run: |
          echo "üìã Testing Makefile target syntax..."

          # Test that infra targets exist and have proper syntax
          targets=(
            "infra-status"
            "infra-plan"
            "infra-up"
            "infra-down"
            "infra-output"
          )

          for target in "${targets[@]}"; do
            echo "Checking target: $target"
            if make -n "$target" ENV=test SCOPE=runtime >/dev/null 2>&1; then
              echo "‚úÖ Target '$target' syntax is valid"
            else
              echo "‚ùå Target '$target' has syntax errors"
              exit 1
            fi
          done

      - name: Test workspace directory resolution
        run: |
          echo "üìÅ Testing workspace directory resolution..."

          # Test that Makefile correctly resolves workspace directories
          echo "Testing SCOPE=base resolution..."
          make -n infra-plan SCOPE=base ENV=test 2>&1 | grep -q "workspaces/base" || {
            echo "‚ùå Base workspace directory not resolved correctly"
            exit 1
          }

          echo "Testing SCOPE=runtime resolution..."
          make -n infra-plan SCOPE=runtime ENV=test 2>&1 | grep -q "workspaces/runtime" || {
            echo "‚ùå Runtime workspace directory not resolved correctly"
            exit 1
          }

          echo "‚úÖ Workspace directory resolution working correctly"

      - name: Test Docker volume mounts
        run: |
          echo "üê≥ Testing Docker volume mounts..."

          # Test that required directories are mounted in Docker commands
          make -n infra-plan SCOPE=base ENV=test 2>&1 | grep -q "backend-config" || {
            echo "‚ùå Backend config directory not mounted"
            exit 1
          }

          echo "‚úÖ Docker volume mounts configured correctly"

  integration-test:
    name: Integration Test (Dry Run)
    runs-on: ubuntu-latest
    needs: [validate-terraform, validate-scripts, test-makefile-targets]
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test complete workflow (dry run)
        run: |
          echo "üß™ Testing complete infrastructure workflow (dry run)..."

          # These commands should not require AWS credentials for dry run
          echo "Step 1: Test planning base infrastructure..."
          make -n infra-plan SCOPE=base ENV=test || {
            echo "‚ùå Base infrastructure planning failed"
            exit 1
          }

          echo "Step 2: Test planning runtime infrastructure..."
          make -n infra-plan SCOPE=runtime ENV=test || {
            echo "‚ùå Runtime infrastructure planning failed"
            exit 1
          }

          echo "Step 3: Test planning all infrastructure..."
          make -n infra-plan SCOPE=all ENV=test || {
            echo "‚ùå All infrastructure planning failed"
            exit 1
          }

          echo "‚úÖ Complete workflow dry run successful"

      - name: Generate test summary
        if: always()
        run: |
          echo "## üß™ Terraform Workspace Test Summary"
          echo ""
          echo "### Validation Results"
          echo "- ‚úÖ Terraform configuration validation"
          echo "- ‚úÖ Shell script validation"
          echo "- ‚úÖ Makefile target validation"
          echo "- ‚úÖ Integration workflow test"
          echo ""
          echo "### Next Steps"
          echo "After merge, the following commands will be available:"
          echo '```bash'
          echo "# Deploy complete infrastructure"
          echo "make infra-up SCOPE=all ENV=dev"
          echo ""
          echo "# Daily cost optimization"
          echo "make infra-down SCOPE=runtime ENV=dev"
          echo "make infra-up SCOPE=runtime ENV=dev"
          echo ""
          echo "# Check status"
          echo "make infra-status ENV=dev"
          echo '```'