# GitHub Actions workflow for comprehensive linting with Docker caching
# Runs all linting checks using cached Docker images for faster execution
name: Linting

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Docker Buildx for advanced caching features
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Cache Docker layers between builds
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('**/Dockerfile*', '**/package*.json', '**/pyproject.toml', '**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Build images with cache
      - name: Build Docker images with cache
        run: |
          export BUILDX_CACHE_FROM="type=local,src=/tmp/.buildx-cache"
          export BUILDX_CACHE_TO="type=local,dest=/tmp/.buildx-cache-new,mode=max"

          docker buildx build \
            --cache-from $BUILDX_CACHE_FROM \
            --cache-to $BUILDX_CACHE_TO \
            --load \
            -t durable-code-backend-dev:latest \
            -f ./durable-code-app/backend/Dockerfile.dev \
            ./durable-code-app/backend

          docker buildx build \
            --cache-from $BUILDX_CACHE_FROM \
            --cache-to $BUILDX_CACHE_TO \
            --load \
            -t durable-code-frontend-dev:latest \
            -f ./durable-code-app/frontend/Dockerfile.dev \
            ./durable-code-app/frontend

      # Move cache for next run
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # Run linting using existing make target
      - name: Run comprehensive linting
        run: make lint-all

      - name: Generate linting summary
        if: always()
        run: |
          echo "## 🔍 Linting Summary" >> $GITHUB_STEP_SUMMARY
          echo "All linting checks completed using \`make lint-all\`" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Python linting (Black, isort, Ruff, Flake8, MyPy, Pylint, Bandit, Xenon)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ TypeScript/React linting (ESLint, Prettier, TypeScript)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Custom design linters (SOLID, Style, Literals, Logging, Loguru)" >> $GITHUB_STEP_SUMMARY
