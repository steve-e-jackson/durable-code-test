# Purpose: Build Docker images and push them to Amazon ECR for deployment
# Scope: Main and develop branches, plus pull requests for Docker image validation
# Overview: This workflow builds production Docker images for frontend and backend services,
#     pushes them to Amazon ECR with multiple tags (latest, commit SHA, branch name), and
#     supports multi-platform builds (AMD64/ARM64). It waits for test completion before
#     building and uses GitHub Actions cache for efficient Docker layer caching.
name: Build and Push to ECR

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'durable-code-app/**'
      - 'Dockerfile*'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'durable-code-app/**'
      - 'Dockerfile*'

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY_FRONTEND: durableai-dev-frontend
  ECR_REPOSITORY_BACKEND: durableai-dev-backend

jobs:
  wait-for-checks:
    name: Wait for Other Checks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Wait for tests and linting
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          check-name: 'Test Suite'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [wait-for-checks]
    if: always() && (needs.wait-for-checks.result == 'success' || needs.wait-for-checks.result == 'skipped')
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHub-Actions-Build-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get commit SHA and sanitized ref
        id: sha
        run: |
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          # Sanitize ref name for Docker tags (replace / with -)
          CLEAN_REF=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9._-]/-/g')
          echo "clean_ref=$CLEAN_REF" >> $GITHUB_OUTPUT

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./durable-code-app/backend
          file: ./durable-code-app/backend/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:latest
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:${{ steps.sha.outputs.sha_short }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:${{ steps.sha.outputs.clean_ref }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          provenance: false

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./durable-code-app/frontend
          file: ./durable-code-app/frontend/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:latest
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:${{ steps.sha.outputs.sha_short }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:${{ steps.sha.outputs.clean_ref }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          provenance: false
          build-args: |
            VITE_API_URL=${{ secrets.API_URL || 'https://api.dev.durableaicoding.net' }}

      - name: Image digest
        if: github.event_name != 'pull_request'
        run: |
          echo "Backend image pushed with tags:"
          echo "  - latest"
          echo "  - ${{ steps.sha.outputs.sha_short }}"
          echo "  - ${{ steps.sha.outputs.clean_ref }}"
          echo ""
          echo "Frontend image pushed with tags:"
          echo "  - latest"
          echo "  - ${{ steps.sha.outputs.sha_short }}"
          echo "  - ${{ steps.sha.outputs.clean_ref }}"
