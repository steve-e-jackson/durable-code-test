# Purpose: Automated end-to-end testing workflow using Playwright for comprehensive application testing
# Scope: Integration testing across all application components (frontend, backend, API endpoints)
# Overview: Executes Playwright integration tests in CI/CD pipeline to validate complete user workflows
#     and application functionality. Manages dynamic port allocation for branch-specific deployments,
#     orchestrates service startup and teardown, handles test artifact collection, and provides
#     comprehensive test coverage reporting. Integrates with Docker containerization for consistent
#     test environments and supports parallel test execution with proper resource management.
# Dependencies: Docker, make targets, branch port allocation scripts, GitHub Actions runners
# Exports: Test execution status, coverage reports, test artifacts, and integration test validation
# Environment: GitHub Actions CI/CD pipeline for pull requests and main branch deployments
# Related: Links to test framework configuration, Docker setup, and deployment workflows
# Implementation: Uses GitHub Actions with Docker orchestration and make-based test execution

name: Playwright Integration Tests

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]

jobs:
  integration-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start services
        run: make dev-start

      - name: Get dynamic ports
        id: ports
        run: |
          # In GitHub Actions, we're in a detached HEAD state, so we need to get the branch from the event
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BRANCH_NAME="${{ github.head_ref }}"
          else
            BRANCH_NAME="${{ github.ref_name }}"
          fi
          BRANCH_NAME=$(echo "$BRANCH_NAME" | tr '/' '-' | tr '[:upper:]' '[:lower:]')
          source <(./scripts/get-branch-ports.sh "$BRANCH_NAME" export)
          echo "frontend_port=$FRONTEND_PORT" >> $GITHUB_OUTPUT
          echo "backend_port=$BACKEND_PORT" >> $GITHUB_OUTPUT
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "Using branch: $BRANCH_NAME, Frontend: $FRONTEND_PORT, Backend: $BACKEND_PORT"

      - name: Wait for services
        run: |
          echo "Waiting for frontend on port ${{ steps.ports.outputs.frontend_port }}..."
          timeout 60 bash -c 'until curl -s http://localhost:${{ steps.ports.outputs.frontend_port }} > /dev/null; do sleep 1; done'
          echo "Waiting for backend on port ${{ steps.ports.outputs.backend_port }}/health..."
          timeout 60 bash -c 'until curl -s http://localhost:${{ steps.ports.outputs.backend_port }}/health > /dev/null; do sleep 1; done'

      - name: Build Playwright container
        run: make test-playwright-build

      - name: Run oscilloscope tests
        env:
          CI: true
        run: make test-playwright-oscilloscope

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-results
          path: |
            test-results/
            playwright-report/

      - name: Stop services
        if: always()
        run: make dev-stop
