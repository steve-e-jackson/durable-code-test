################################################################################
# Simplified Testing Makefile Extension
################################################################################
#
# Essential testing targets:
#   make test-all         - Run all tests with coverage (REQUIRED BY CI)
#   make test             - Quick tests without coverage
#   make test-playwright  - Integration tests (REQUIRED BY CI)
#
################################################################################

.PHONY: test-all test test-backend test-frontend test-playwright-build test-playwright test-playwright-oscilloscope

# Main testing targets - REQUIRED BY GITHUB ACTIONS
test-all: dev-start test-backend-coverage test-frontend-coverage test-playwright ## Run all tests with coverage (backend + frontend + integration)
	@echo "$(GREEN)✅ All tests completed with coverage!$(NC)"

# Quick testing without coverage
test: dev-start ## Run all tests quickly (no coverage)
	@echo "$(CYAN)╔════════════════════════════════════════════════════════════╗$(NC)"
	@echo "$(CYAN)║                    Quick Test Suite                       ║$(NC)"
	@echo "$(CYAN)╚════════════════════════════════════════════════════════════╝$(NC)"
	@echo "$(YELLOW)Running backend tests...$(NC)"
	@docker exec durable-code-backend-$(BRANCH_NAME)-dev bash -c "cd /app && PYTHONPATH=/app:/app/tools poetry run pytest test/ -v" || echo "$(YELLOW)Backend tests completed with some failures$(NC)"
	@echo "$(YELLOW)Running frontend tests...$(NC)"
	@docker exec durable-code-frontend-$(BRANCH_NAME)-dev npm run test:run
	@echo "$(GREEN)✓ Quick tests complete$(NC)"

# Backend Python tests
test-backend: dev-start ## Run backend tests with coverage
	@echo "$(CYAN)╔════════════════════════════════════════════════════════════╗$(NC)"
	@echo "$(CYAN)║              Backend Tests with Coverage                  ║$(NC)"
	@echo "$(CYAN)╚════════════════════════════════════════════════════════════╝$(NC)"
	@echo "$(YELLOW)Running backend and framework tests with coverage...$(NC)"
	@docker exec durable-code-backend-$(BRANCH_NAME)-dev bash -c "cd /app && PYTHONPATH=/app:/app/tools COVERAGE_FILE=/tmp/.coverage poetry run pytest test/ --cov=app --cov=tools/design_linters --cov-report=term --cov-report=term:skip-covered --tb=short -v" || echo "$(YELLOW)Tests completed with some failures$(NC)"
	@echo "$(GREEN)✓ Backend tests complete$(NC)"

# Internal target for CI
test-backend-coverage: test-backend

# Frontend JavaScript/TypeScript tests
test-frontend: dev-start ## Run frontend tests
	@echo "$(CYAN)╔════════════════════════════════════════════════════════════╗$(NC)"
	@echo "$(CYAN)║                    Frontend Tests                         ║$(NC)"
	@echo "$(CYAN)╚════════════════════════════════════════════════════════════╝$(NC)"
	@echo "$(YELLOW)Running frontend tests...$(NC)"
	@docker exec durable-code-frontend-$(BRANCH_NAME)-dev npm run test:run
	@echo "$(GREEN)✓ Frontend tests complete$(NC)"

# Frontend tests with coverage
test-frontend-coverage: dev-start ## Run frontend tests with coverage
	@echo "$(CYAN)╔════════════════════════════════════════════════════════════╗$(NC)"
	@echo "$(CYAN)║            Frontend Tests with Coverage                   ║$(NC)"
	@echo "$(CYAN)╚════════════════════════════════════════════════════════════╝$(NC)"
	@echo "$(YELLOW)Running frontend tests with coverage...$(NC)"
	@docker exec durable-code-frontend-$(BRANCH_NAME)-dev npm run test:coverage
	@echo "$(GREEN)✓ Frontend coverage tests complete$(NC)"

# Playwright integration tests - REQUIRED BY GITHUB ACTIONS
test-playwright-build: ## Build Playwright test container
	@echo "$(CYAN)Building Playwright test container...$(NC)"
	@docker build -f test/integration_test/Dockerfile.playwright -t playwright-tests test/integration_test/
	@echo "$(GREEN)✓ Playwright container built$(NC)"

test-playwright: dev-start test-playwright-build ## Run Playwright integration tests
	@echo "$(CYAN)Running Playwright integration tests...$(NC)"
	@if [ "$(CI)" = "true" ]; then \
		docker run --rm --network durable-code-test_durable-network-dev \
			-e PLAYWRIGHT_BROWSERS_PATH=/ms-playwright \
			-e BRANCH_NAME="$(BRANCH_NAME)" \
			-e FRONTEND_PORT="$(FRONTEND_PORT)" \
			-e BACKEND_PORT="$(BACKEND_PORT)" \
			-e USE_HOST_NETWORK=false \
			playwright-tests; \
	else \
		docker run --rm --network host \
			-e PLAYWRIGHT_BROWSERS_PATH=/ms-playwright \
			-e BRANCH_NAME="$(BRANCH_NAME)" \
			-e FRONTEND_PORT="$(FRONTEND_PORT)" \
			-e BACKEND_PORT="$(BACKEND_PORT)" \
			-e USE_HOST_NETWORK=true \
			playwright-tests; \
	fi
	@echo "$(GREEN)✓ Playwright tests complete$(NC)"

test-playwright-oscilloscope: dev-start test-playwright-build ## Run oscilloscope Playwright tests (REQUIRED BY CI)
	@echo "$(CYAN)Running oscilloscope integration tests...$(NC)"
	@if [ "$(CI)" = "true" ]; then \
		docker run --rm --network durable-code-test_durable-network-dev \
			-e PLAYWRIGHT_BROWSERS_PATH=/ms-playwright \
			-e BRANCH_NAME="$(BRANCH_NAME)" \
			-e FRONTEND_PORT="$(FRONTEND_PORT)" \
			-e BACKEND_PORT="$(BACKEND_PORT)" \
			-e USE_HOST_NETWORK=false \
			playwright-tests pytest -v test_oscilloscope_playwright.py; \
	else \
		docker run --rm --network host \
			-e PLAYWRIGHT_BROWSERS_PATH=/ms-playwright \
			-e BRANCH_NAME="$(BRANCH_NAME)" \
			-e FRONTEND_PORT="$(FRONTEND_PORT)" \
			-e BACKEND_PORT="$(BACKEND_PORT)" \
			-e USE_HOST_NETWORK=true \
			playwright-tests pytest -v test_oscilloscope_playwright.py; \
	fi
	@echo "$(GREEN)✓ Oscilloscope tests complete$(NC)"